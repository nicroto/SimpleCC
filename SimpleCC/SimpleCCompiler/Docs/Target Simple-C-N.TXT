
Alphabet
------

 Letter = 'a'..'z' | 'A'..'Z' | '_'.
 Digit = '0'..'9'.
 Space = \t | \n | \r | ' '.
 AnyChar = ' '..\0xff.


Lexemes
-------

  Number = Digit {Digit}.
  Ident = Letter {Letter | Digit}.
  Delimiter = Space | '/*' {AnyChar}\('*' '/') '*/'
  Keyword = 'if' |
			'while' |
			'break'.

  SpecialSymbol = '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '(' |
				  ')' | ';' | '+' | '-' | '*' | '|' | '/' | '%' |
				  '&' | '~' | '++' | '--' | '<=' | '!=' | '>=' | 
				  '==' | '<' | '>' | '||' | '&&' | '!'.
  OtherSymbol = ...


Grammar
---------

[1]  Program = {Statement}.
[2]  Statement =	Block |
					IfSt |
					WhileSt |
					StopSt |
					[Expression] ';'.
[3]  Block = '{' {Statement} '}'
[4]  IfSt = 'if' '(' Expression ')' Statement ['else' Statement].
[5]  WhileSt = 'while' '(' Expression ')' Statement. 
[6]  StopSt =	'break' ';' |
				'continue' ';'.
[7]  Expression =  AdditiveExpr [('<' | '<=' | '==' | '!=' | '>=' | '>') AdditiveExpr].
[8]  AdditiveExpr = ['+' | '-'] MultiplicativeExpr {('+' | '-' | '|' | '||') MultiplicativeExpr}.
[9]  MultiplicativeExpr = SimpleExpr {('*' | '/' | '%' | '&' | '&&') SimpleExpr}.
[10] SimpleExpr = ('++' | '--' | '-' | '~' | '!') PrimaryExpr | PrimaryExpr ['++' | '--'].
[11] PrimaryExpr =	VarIdent '=' ArrayDef |
					['+'|'-'] VarIdent |
					'*' VarIdent |
					'&' VarIdent |
					VarIdent '[' (Number | VarIdent) ']' |
					VarIdent [('='|'+='|'-='|'*='|'/='|'%=') Expression] |
					FuncIdent '(' [Expression] ')' |
					'(' Expression ')'.
[12] ArrayDef = '[' [ArrayItem {',' ArrayItem}] ']'
[13] ArrayItem = (Expression | ArrayDef).


Tables
-------

  Predefined Identifiers (reserved) (Name, Kind, [Type, Offset, Param], ...)

  Embedded:
    types		{ int, bool }
    functions	{
					scanf,
					printf,
					arrPush,
					arrLength,
					arrConcat,
					arrInsert,
					dequeue,
					stackPush
				}


Examples
-------

 - DepthFirstSearch:

	graph = [
		[1, 2],
		[3, 4],
		[],
		[5],
		[],
		[]
	];
	array = [0];
	result = [0];
	while (arrLength(array) > 0) {
		index = dequeue(array);
		stackPush(array, index);
		children = graph[index];
		if (arrLength(children) > 0) {
			array = arrConcat(children, array);
		}
	}

 - nth Fibonnachi number:

	n = scanf() - 1;
	fib = [1, 1];
	counter = 2;
	while(counter < n) {
		arrPush(fib, (fib[counter - 1] + fib[counter - 2]));
		counter++;
	}
	printf(fib[n]);